setwd("C:/users/meglarse/github/larsen-dissertation/analyses/chpt2_cstat-comms/community-sequencing")
# Load packages, source code, and dependencies
require(vegan);require(reshape)
require(nlme);require(ggplot2)
#require(picante); require(ape)
#require(seqinr);require(fossil)
#require(simba)
# Load data files
avg <- read.csv("./data/cstat-means.csv")
flow.counts <- read.csv("./data/20150624-popcounts.csv", header = T)
sync <- read.csv("./data/cstat-scopecounts.csv", header = T)
theme_set(theme_bw())
flow.counts$time2 <- as.factor(flow.counts$time)
#m1 <- melt(flow.counts, id = c(trt,lim,cID,time))
flow.counts$hs = log10(flow.counts$flow.het)/log10(flow.counts$flow.syn)
m1 <- melt(flow.counts)
sem <- function(x){
sd(x)/sqrt(length(x))
}
c1 <- cast(m1, trt + lim + time2 ~ variable, mean)
c2 <- cast(m1, trt + lim + time2 ~ variable, sem)
c1$time2 <- as.numeric(as.character(c1$time))
avg <- read.csv("./data/cstat-means.csv")
c3 <- cast(m1, trt + lim ~ variable, mean)
c4 <- cast(m1, trt + lim ~ variable, sem)
c5 <- cast(m1, cID ~ variable, mean)
#t.test(c5[2:5,4],c5[c(6,8,9),4])
p = ggplot(flow.counts, aes(x = time, y = hs)) +
facet_grid(trt ~ lim) +
geom_path(aes(col = cID))+
geom_point(col = "white", size = 6) +
geom_point(aes(col = cID), size = 4)
print(p)
head(flow.counts)
# Suggested changes
#png(filename = "./figures/time-series.png",
#    width = 1200, height = 1000, units = "px", pointsize = 20,
#   bg = "white", family = "sans", type = "cairo")
#pdf(file = "./figure_populationdynamics.pdf",height = 4.5, width = 5, pointsize = 8)
day.start <- -125
day.end <- 170
par(mfrow = c(2,2))
par(mar = c(2,6,3,1)+0.1)
# Control plots
plot(avg$day,avg$NmeanC,
xlim = c(day.start,day.end),ylim = c(1*10^5,10^9), log = "y", xaxt = 'n',yaxt = 'n',
xlab = NA, ylab = expression(paste("Abundance (mL"^"-1",")")),
cex.lab = 1.5, font.lab = 2, main = "N-Limited",
lty = 1, lwd = 1, type = "o", col = "white", bg = "white",
pch = 21, cex = 2)
#axis(1, cex.axis = 1.2,c(-120,-80,-40,0,40,80,120,160))
ticks <- seq(5, 9, by=1)
labels <- sapply(ticks, function(i) as.expression(bquote(10^ .(i))))
axis(2, cex.axis = 1.2, at = c(10^5, 10^6, 10^7, 10^8, 10^9),
labels = labels, las = 1)
#abline(v = 0, col = "grey", lty = 2, lwd = 2)
# Add error bars for the microscope counts
#  arrows(avg$day, avg$NmeanC - avg$NseC,
#         avg$day, avg$NmeanC + avg$NseC,
#         code = 0,lwd = 2, col = "grey")
if(day.start < 0){
abline(v = 0, lwd = 1, lty = 2, col = "grey66")
}
points(avg$day,avg$NmeanC,
pch = 21, col = "grey",bg = "white",
type = 'o',lwd = 1,cex = 1, lty = 1)
points(c1$time[c1$trt == "C" & c1$lim == "N"],
c1$flow.het[c1$trt == "C" & c1$lim == "N"],
pch = 24, col = "black", bg = "green",
type = "o", lwd = 1, cex = 1.2, lty = 1)
#  points(c1$time2[c1$trt == "C" & c1$lim == "N"],
#         c1$flow.syn[c1$trt == "C" & c1$lim == "N"],
#         pch = 21, col = "black", bg = "black",
#         type = "o", lwd = 2, cex = 1.2, lty = 1)
box(lwd = 2)
par(mar = c(2,4,3,3)+0.1)
#PL
plot(avg$day,avg$PmeanC,
xlim = c(day.start,day.end),ylim = c(1*10^5,10^9), log = "y", xaxt = 'n',yaxt = 'n',
xlab = NA, ylab = NA, main = "P-Limited",cex.lab = 1.5,
lty = 1, lwd = 1, type = "o", col = "grey", bg = "white",
pch = 21, cex = 1, font.lab = 2)
#axis(1, cex.axis = 1.2,c(-120,-80,-40,0,40,80,120,160))
ticks <- seq(5, 9, by=1)
labels <- sapply(ticks, function(i) as.expression(bquote(10^ .(i))))
axis(2, cex.axis = 1.25, at = c(10^5, 10^6, 10^7, 10^8, 10^9),
labels = labels, las = 1)
#abline(v = 0, col = "grey", lty = 2, lwd = 2)
# Add error bars for the microscope counts
#  arrows(avg$day, avg$PmeanC - avg$PseC,
#         avg$day, avg$PmeanC + avg$PseC,
#         code = 0,lwd = 2, col = "grey")
#add a vertical line at the day of phage addition
if(day.start < 0){
abline(v = 0, lwd = 1, lty = 2, col = "grey66")
}
points(avg$day,avg$PmeanC,
pch = 21, col = "grey",bg = "white",
type = 'o',lwd = 1,cex = 1, lty = 1)
arrows(c1$time[c1$trt == "C" & c1$lim == "P"],
c1$flow.het[c1$trt == "C" & c1$lim == "P"] - c2$flow.het[c2$trt == "C" & c2$lim == "P"],
c1$time[c1$trt == "C" & c1$lim == "P"],
c1$flow.het[c1$trt == "C" & c1$lim == "P"] + c2$flow.het[c2$trt == "C" & c2$lim == "P"],
code = 0,lwd = 1, col = "black")
points(c1$time2[c1$trt == "C" & c1$lim == "P"],
c1$flow.het[c1$trt == "C" & c1$lim == "P"],
pch = 24, col = "black", bg = "green",
type = "o", lwd = 1, cex = 1.2, lty = 1)
#  points(c1$time2[c1$trt == "C" & c1$lim == "P"],
#         c1$flow.syn[c1$trt == "C" & c1$lim == "P"],
#         pch = 21, col = "black", bg = "black",
#         type = "o", lwd = 2, cex = 1.2, lty = 1)
box(lwd=2)
# Treatment plots
par(mar = c(5,6,1,1)+0.1)
plot(avg$day,avg$NmeanSI,
xlim = c(day.start,day.end),ylim = c(1*10^5,10^9), log = "y", xaxt = 'n',yaxt = 'n',
xlab = "Time (d)", ylab = expression(paste("Abundance (mL"^"-1",")")),
cex.lab = 1.5, font.lab = 2, main = NA,
lty = 1, lwd = 1, type = "o", col = "grey", bg = "white",
pch = 21, cex = 1)
axis(1, cex.axis = 1.2,c(-120,-80,-40,0,40,80,120,160), font = 1)
ticks <- seq(5, 9, by=1)
labels <- sapply(ticks, function(i) as.expression(bquote(10^ .(i))))
axis(2, cex.axis = 1.2, at = c(10^5, 10^6, 10^7, 10^8, 10^9),
labels = labels, las = 1, font = 1)
#abline(v = 0, col = "grey", lty = 2, lwd = 2)
# Add error bars for the microscope counts
#  arrows(avg$day, avg$NmeanSI - avg$NseSI,
#         avg$day, avg$NmeanSI + avg$NseSI,
#         code = 0,lwd = 2, col = "grey")
#  arrows(avg$day, avg$NmeanP - avg$NseP,
#         avg$day, avg$NmeanP + avg$NseP,
#         code = 0,lwd = 2, col = "grey")
if(day.start < 0){
abline(v = 0, lwd = 1, lty = 2, col = "grey66")
}
points(avg$day,avg$NmeanSI,
pch = 21, col = "grey",bg = "white",
type = 'o',lwd = 1,cex = 1, lty = 1)
points(avg$day,avg$NmeanP,
pch = 22, col = "grey",bg = "grey80",
type = 'o',lwd = 1,cex = 1, lty = 1)
arrows(c1$time[c1$trt == "T" & c1$lim == "N"],
c1$flow.het[c1$trt == "T" & c1$lim == "N"] - c2$flow.het[c2$trt == "T" & c2$lim == "N"],
c1$time[c1$trt == "T" & c1$lim == "N"],
c1$flow.het[c1$trt == "T" & c1$lim == "N"] + c2$flow.het[c2$trt == "T" & c2$lim == "N"],
code = 0,lwd = 1, col = "black")
points(c1$time[c1$trt == "T" & c1$lim == "N"],
c1$flow.het[c1$trt == "T" & c1$lim == "N"],
pch = 24, col = "black", bg = "green",
type = "o", lwd = 1, cex = 1.2, lty = 1)
box(lwd = 2)
#PL
par(mar = c(5,4,1,3)+0.1)
plot(avg$day,avg$PmeanSI,
xlim = c(day.start,day.end),ylim = c(1*10^5,10^9), log = "y", xaxt = 'n',yaxt = 'n',
xlab = "Time (d)", ylab = NA, main = NA, cex.lab = 1.5,
lty = 1, lwd = 1, type = "o", col = "grey", bg = "white",
pch = 21, cex = 1, font.lab = 2)
axis(1, cex.axis = 1.2,c(-120,-80,-40,0,40,80,120,160))
ticks <- seq(5, 9, by=1)
labels <- sapply(ticks, function(i) as.expression(bquote(10^ .(i))))
axis(2, cex.axis = 1.25, at = c(10^5, 10^6, 10^7, 10^8, 10^9),
labels = labels, las = 1, font = 2)
# Add error bars for the microscope counts
#  arrows(avg$day, avg$PmeanSI - avg$PseSI,
#         avg$day, avg$PmeanSI + avg$PseSI,
#         code = 0,lwd = 2, col = "grey")
#  arrows(avg$day, avg$PmeanP - avg$PseP,
#         avg$day, avg$PmeanP + avg$PseP,
#         code = 0,lwd = 2, col = "grey")
#add a vertical line at the day of phage addition
if(day.start < 0){
abline(v = 0, lwd =1, lty = 2, col = "grey66")
}
points(avg$day,avg$PmeanSI,
pch = 21, col = "grey",bg = "white",
type = 'o',lwd = 1,cex = 1, lty = 1)
points(avg$day,avg$PmeanP,
pch = 22, col = "grey",bg = "grey80",
type = 'o',lwd = 1,cex = 1, lty = 1)
arrows(c1$time[c1$trt == "T" & c1$lim == "P"],
c1$flow.het[c1$trt == "T" & c1$lim == "P"] - c2$flow.het[c2$trt == "T" & c2$lim == "P"],
c1$time[c1$trt == "T" & c1$lim == "P"],
c1$flow.het[c1$trt == "T" & c1$lim == "P"] + c2$flow.het[c2$trt == "T" & c2$lim == "P"],
code = 0,lwd = 1, col = "black")
points(c1$time[c1$trt == "T" & c1$lim == "P"],
c1$flow.het[c1$trt == "T" & c1$lim == "P"],
pch = 24, col = "black", bg = "green",
type = "o", lwd = 1, cex = 1.2, lty = 1)
box(lwd=2)
#par(new=TRUE)
#plot(avg$day,vbP,
#     type = "l", lty = 1, lwd = 2, col = "red",
#     xaxt="n",yaxt="n",xlab="",ylab="")
#axis(4, las = 1, col = "red", cex.axis = 1.25)
#mtext("Phage to Cyanobacteria",side=4,line=3)
legend("bottomright",
c("heterotrophs","host","phage"),
pch = c(24,21,22), lty = 1,
pt.bg = c("green","white","grey"),
col = c("black","grey","grey"),
bty = 'n', cex = 0.8, pt.cex = 1)
#dev.off()
require("vegan")
source("./bin/DiversityFunctions.r")
se <- function(x){sd(x)/sqrt(length(x))}
# data file information
level <- "unique"
shared <- "./mothur/20151029/Cstat_all.final.an.shared"
design.in <- "./data/design.txt"
plot.title <- "Cstat_prelim"
mothtax <- "./mothur/20151029/Cstat_all.final.an.unique.cons.taxonomy"
mothshare <- "./mothur/20151029/Cstat_all.final.an.shared"
#mothtree <- "./mothur/20151029/Cstat_all.final.an.tree"
cutoff <- "unique"
# Create phyloseq object
physeq <- import_mothur(mothur_shared_file = mothshare,
mothur_constaxonomy_file = mothtax,
#mothur_tree_file = mothtree,
cutoff)
library(phyloseq)
install.package("phyloseq")
install.packages("phyloseq")
library(phyloseq)
cstat_data <- t(read.otu(shared, level))
design <- read.delim(design.in, header=T, row.names=1)
# Remove Zero Sum OTUs -- singletons and doubletons
cstat_data <- cstat_data[!(rowSums(abs(cstat_data)) < 2),]
# Remove cyanobacteria calls
rm.rows <- c(17,23,28,31,36,38,40,46,52)
cstat_data_syn <- cstat_data
cstat_data <- cstat_data[-rm.rows,]
cstat_data <- t(read.otu(shared, level))
design <- read.delim(design.in, header=T, row.names=1)
# Remove cyanobacteria calls
rm.rows <- c(17,23,28,31,36,38,40,46,52)
cstat_data_syn <- cstat_data
cstat_data <- cstat_data[-rm.rows,]
S.obs <- function(x = ""){
rowSums(X > 0) *1
}
S.chao1 <- function(x = ""){
S.obs(x) + (sum(x == 1)^2) / (2 * sum(x == 2))
}
cstat.S <- S.obs(cstat_data)
cstat.S <- S.obs(cstat_data[,1])
cstat_data[,1]
cstat_data[1,]
cstat.S <- S.obs(t(cstat_data))
str(cstat_data)
cstat_data <- as.data.frame(t(cstat_data))
cstat.S <- S.obs(cstat_data)
cstat_data <- t(read.otu(shared, level))
design <- read.delim(design.in, header=T, row.names=1)
rm.rows <- c(17,23,28,31,36,38,40,46,52)
cstat_data_syn <- cstat_data
cstat_data <- cstat_data[-rm.rows,]
S.obs <- function(x = ""){
rowSums(x > 0) *1
}
cstat.S <- S.obs(cstat_data)
cstat.S
cstat_data
cstat_data <- read.otu(shared, level)
cstat_data
cstat_data <- t(read.otu(shared, level))
design <- read.delim(design.in, header=T, row.names=1)
# Remove cyanobacteria calls
rm.rows <- c(17,23,28,31,36,38,40,46,52)
cstat_data_syn <- cstat_data
cstat_data <- cstat_data[-rm.rows,]
cstat_data <- t(cstat_data)
cstat.S <- S.obs(cstat_data)
cstat.S
min.N <- min(rowSums(cstat_data))
S.rarefy <- rarefy(x = cstat_data, sample = min.N, se = TRUE)
rarecurve(x = soilbac, step = 20, col = "blue", cex = 0.6, las = 1)
rarecurve(x = cstat_data, step = 20, col = "blue", cex = 0.6, las = 1)
dev.off()
rarecurve(x = cstat_data, step = 20, col = "blue", cex = 0.6, las = 1)
abline(0,1, col = "red")
text(30, 30, "1:1", pos = 2, col = "red")
# synechococcus
syn1 <- read.delim("./data/syn-nitmet.tsv", header = T, sep = "\t")
syn2 <- read.delim("./data/syn-phomet.tsv", header = T, sep = "\t")
syn3 <- read.delim("./data/syn-secondmet.tsv", header = T, sep = "\t")
syn4 <- read.delim("./data/syn-stressmet.tsv", header = T, sep = "\t")
syn5 <- read.delim("./data/syn-sulfurmet.tsv", header = T, sep = "\t")
syn = rbind(syn1, syn2, syn3, syn4, syn5)
syn = merge(syn, meta, by.x = "metagenome", by.y = "meta.id")
dim(syn)
# Sulfitobacter
s1 <- read.delim("./data/sulfitobacter-nitmet.tsv", header = T, sep = "\t")
s2 <- read.delim("./data/sulfitobacter-phomet.tsv", header = T, sep = "\t")
s3 <- read.delim("./data/sulfitobacter-secondmet.tsv", header = T, sep = "\t")
s4 <- read.delim("./data/sulfitobacter-stressmet.tsv", header = T, sep = "\t")
s5 <- read.delim("./data/sulfitobacter-sulmet.tsv", header = T, sep = "\t")
sul = rbind(s1, s2, s3, s4, s5)
sul = merge(sul, meta, by.x = "metagenome", by.y = "meta.id")
dim(sul)
# Sphingomonas
s1 <- read.delim("./data/sphin-phomet.tsv", header = T, sep = "\t")
s2 <- read.delim("./data/sphin-seconmet.tsv", header = T, sep = "\t")
s3 <- read.delim("./data/sphin-stressmet.tsv", header = T, sep = "\t")
s4 <- read.delim("./data/sphin-sulfmet.tsv", header = T, sep = "\t")
s5 <- read.delim("./data/sphingo-nitmet.tsv", header = T, sep = "\t")
sph = rbind(s1, s2, s3, s4, s5)
dim(sph)
