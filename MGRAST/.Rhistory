sem <- function(x){
sd(x)/sqrt(length(x))
}
c1 <- cast(m1, trt + lim + time2 ~ variable, mean)
c2 <- cast(m1, trt + lim + time2 ~ variable, sem)
c1$time2 <- as.numeric(as.character(c1$time))
avg <- read.csv("./data/cstat-means.csv")
c3 <- cast(m1, trt + lim ~ variable, mean)
c4 <- cast(m1, trt + lim ~ variable, sem)
c5 <- cast(m1, cID ~ variable, mean)
require(reshape)
flow.counts$time2 <- as.factor(flow.counts$time)
#m1 <- melt(flow.counts, id = c(trt,lim,cID,time))
flow.counts$hs = log10(flow.counts$flow.het)/log10(flow.counts$flow.syn)
m1 <- melt(flow.counts)
sem <- function(x){
sd(x)/sqrt(length(x))
}
c1 <- cast(m1, trt + lim + time2 ~ variable, mean)
c2 <- cast(m1, trt + lim + time2 ~ variable, sem)
c1$time2 <- as.numeric(as.character(c1$time))
avg <- read.csv("./data/cstat-means.csv")
c3 <- cast(m1, trt + lim ~ variable, mean)
c4 <- cast(m1, trt + lim ~ variable, sem)
c5 <- cast(m1, cID ~ variable, mean)
#t.test(c5[2:5,4],c5[c(6,8,9),4])
day.start <- -125
day.end <- 170
par(mfrow = c(2,2))
par(mar = c(2,6,3,1)+0.1)
# Control plots
plot(avg$day,avg$NmeanC,
xlim = c(day.start,day.end),ylim = c(1*10^5,10^9), log = "y", xaxt = 'n',yaxt = 'n',
xlab = NA, ylab = expression(paste("Abundance (mL"^"-1",")")),
cex.lab = 1.5, font.lab = 2, main = "N-Limited",
lty = 1, lwd = 1, type = "o", col = "white", bg = "white",
pch = 21, cex = 2)
#axis(1, cex.axis = 1.2,c(-120,-80,-40,0,40,80,120,160))
ticks <- seq(5, 9, by=1)
labels <- sapply(ticks, function(i) as.expression(bquote(10^ .(i))))
axis(2, cex.axis = 1.2, at = c(10^5, 10^6, 10^7, 10^8, 10^9),
labels = labels, las = 1)
#abline(v = 0, col = "grey", lty = 2, lwd = 2)
# Add error bars for the microscope counts
#  arrows(avg$day, avg$NmeanC - avg$NseC,
#         avg$day, avg$NmeanC + avg$NseC,
#         code = 0,lwd = 2, col = "grey")
if(day.start < 0){
abline(v = 0, lwd = 1, lty = 2, col = "grey66")
}
points(avg$day,avg$NmeanC,
pch = 21, col = "grey",bg = "white",
type = 'o',lwd = 1,cex = 1, lty = 1)
points(c1$time[c1$trt == "C" & c1$lim == "N"],
c1$flow.het[c1$trt == "C" & c1$lim == "N"],
pch = 24, col = "black", bg = "green",
type = "o", lwd = 1, cex = 1.2, lty = 1)
#  points(c1$time2[c1$trt == "C" & c1$lim == "N"],
#         c1$flow.syn[c1$trt == "C" & c1$lim == "N"],
#         pch = 21, col = "black", bg = "black",
#         type = "o", lwd = 2, cex = 1.2, lty = 1)
box(lwd = 2)
par(mar = c(2,4,3,3)+0.1)
#PL
plot(avg$day,avg$PmeanC,
xlim = c(day.start,day.end),ylim = c(1*10^5,10^9), log = "y", xaxt = 'n',yaxt = 'n',
xlab = NA, ylab = NA, main = "P-Limited",cex.lab = 1.5,
lty = 1, lwd = 1, type = "o", col = "grey", bg = "white",
pch = 21, cex = 1, font.lab = 2)
#axis(1, cex.axis = 1.2,c(-120,-80,-40,0,40,80,120,160))
ticks <- seq(5, 9, by=1)
labels <- sapply(ticks, function(i) as.expression(bquote(10^ .(i))))
axis(2, cex.axis = 1.25, at = c(10^5, 10^6, 10^7, 10^8, 10^9),
labels = labels, las = 1)
#abline(v = 0, col = "grey", lty = 2, lwd = 2)
# Add error bars for the microscope counts
#  arrows(avg$day, avg$PmeanC - avg$PseC,
#         avg$day, avg$PmeanC + avg$PseC,
#         code = 0,lwd = 2, col = "grey")
#add a vertical line at the day of phage addition
if(day.start < 0){
abline(v = 0, lwd = 1, lty = 2, col = "grey66")
}
points(avg$day,avg$PmeanC,
pch = 21, col = "grey",bg = "white",
type = 'o',lwd = 1,cex = 1, lty = 1)
arrows(c1$time[c1$trt == "C" & c1$lim == "P"],
c1$flow.het[c1$trt == "C" & c1$lim == "P"] - c2$flow.het[c2$trt == "C" & c2$lim == "P"],
c1$time[c1$trt == "C" & c1$lim == "P"],
c1$flow.het[c1$trt == "C" & c1$lim == "P"] + c2$flow.het[c2$trt == "C" & c2$lim == "P"],
code = 0,lwd = 1, col = "black")
points(c1$time2[c1$trt == "C" & c1$lim == "P"],
c1$flow.het[c1$trt == "C" & c1$lim == "P"],
pch = 24, col = "black", bg = "green",
type = "o", lwd = 1, cex = 1.2, lty = 1)
#  points(c1$time2[c1$trt == "C" & c1$lim == "P"],
#         c1$flow.syn[c1$trt == "C" & c1$lim == "P"],
#         pch = 21, col = "black", bg = "black",
#         type = "o", lwd = 2, cex = 1.2, lty = 1)
plot(avg$day,avg$NmeanSI,
xlim = c(day.start,day.end),ylim = c(1*10^5,10^9), log = "y", xaxt = 'n',yaxt = 'n',
xlab = "Time (d)", ylab = expression(paste("Abundance (mL"^"-1",")")),
cex.lab = 1.5, font.lab = 2, main = NA,
lty = 1, lwd = 1, type = "o", col = "grey", bg = "white",
pch = 21, cex = 1)
axis(1, cex.axis = 1.2,c(-120,-80,-40,0,40,80,120,160), font = 1)
ticks <- seq(5, 9, by=1)
labels <- sapply(ticks, function(i) as.expression(bquote(10^ .(i))))
axis(2, cex.axis = 1.2, at = c(10^5, 10^6, 10^7, 10^8, 10^9),
labels = labels, las = 1, font = 1)
#abline(v = 0, col = "grey", lty = 2, lwd = 2)
# Add error bars for the microscope counts
#  arrows(avg$day, avg$NmeanSI - avg$NseSI,
#         avg$day, avg$NmeanSI + avg$NseSI,
#         code = 0,lwd = 2, col = "grey")
#  arrows(avg$day, avg$NmeanP - avg$NseP,
#         avg$day, avg$NmeanP + avg$NseP,
#         code = 0,lwd = 2, col = "grey")
if(day.start < 0){
abline(v = 0, lwd = 1, lty = 2, col = "grey66")
}
points(avg$day,avg$NmeanSI,
pch = 21, col = "grey",bg = "white",
type = 'o',lwd = 1,cex = 1, lty = 1)
points(avg$day,avg$NmeanP,
pch = 22, col = "grey",bg = "grey80",
type = 'o',lwd = 1,cex = 1, lty = 1)
arrows(c1$time[c1$trt == "T" & c1$lim == "N"],
c1$flow.het[c1$trt == "T" & c1$lim == "N"] - c2$flow.het[c2$trt == "T" & c2$lim == "N"],
c1$time[c1$trt == "T" & c1$lim == "N"],
c1$flow.het[c1$trt == "T" & c1$lim == "N"] + c2$flow.het[c2$trt == "T" & c2$lim == "N"],
code = 0,lwd = 1, col = "black")
points(c1$time[c1$trt == "T" & c1$lim == "N"],
c1$flow.het[c1$trt == "T" & c1$lim == "N"],
pch = 24, col = "black", bg = "green",
type = "o", lwd = 1, cex = 1.2, lty = 1)
box(lwd = 2)
#PL
par(mar = c(5,4,1,3)+0.1)
plot(avg$day,avg$PmeanSI,
xlim = c(day.start,day.end),ylim = c(1*10^5,10^9), log = "y", xaxt = 'n',yaxt = 'n',
xlab = "Time (d)", ylab = NA, main = NA, cex.lab = 1.5,
lty = 1, lwd = 1, type = "o", col = "grey", bg = "white",
pch = 21, cex = 1, font.lab = 2)
axis(1, cex.axis = 1.2,c(-120,-80,-40,0,40,80,120,160))
ticks <- seq(5, 9, by=1)
labels <- sapply(ticks, function(i) as.expression(bquote(10^ .(i))))
axis(2, cex.axis = 1.25, at = c(10^5, 10^6, 10^7, 10^8, 10^9),
labels = labels, las = 1, font = 2)
# Add error bars for the microscope counts
#  arrows(avg$day, avg$PmeanSI - avg$PseSI,
#         avg$day, avg$PmeanSI + avg$PseSI,
#         code = 0,lwd = 2, col = "grey")
#  arrows(avg$day, avg$PmeanP - avg$PseP,
#         avg$day, avg$PmeanP + avg$PseP,
#         code = 0,lwd = 2, col = "grey")
#add a vertical line at the day of phage addition
if(day.start < 0){
abline(v = 0, lwd =1, lty = 2, col = "grey66")
}
points(avg$day,avg$PmeanSI,
pch = 21, col = "grey",bg = "white",
type = 'o',lwd = 1,cex = 1, lty = 1)
points(avg$day,avg$PmeanP,
pch = 22, col = "grey",bg = "grey80",
type = 'o',lwd = 1,cex = 1, lty = 1)
arrows(c1$time[c1$trt == "T" & c1$lim == "P"],
c1$flow.het[c1$trt == "T" & c1$lim == "P"] - c2$flow.het[c2$trt == "T" & c2$lim == "P"],
c1$time[c1$trt == "T" & c1$lim == "P"],
c1$flow.het[c1$trt == "T" & c1$lim == "P"] + c2$flow.het[c2$trt == "T" & c2$lim == "P"],
code = 0,lwd = 1, col = "black")
points(c1$time[c1$trt == "T" & c1$lim == "P"],
c1$flow.het[c1$trt == "T" & c1$lim == "P"],
pch = 24, col = "black", bg = "green",
type = "o", lwd = 1, cex = 1.2, lty = 1)
box(lwd=2)
#par(new=TRUE)
#plot(avg$day,vbP,
#     type = "l", lty = 1, lwd = 2, col = "red",
#     xaxt="n",yaxt="n",xlab="",ylab="")
#axis(4, las = 1, col = "red", cex.axis = 1.25)
#mtext("Phage to Cyanobacteria",side=4,line=3)
legend("bottomright",
c("heterotrophs","host","phage"),
pch = c(24,21,22), lty = 1,
pt.bg = c("green","white","grey"),
col = c("black","grey","grey"),
bty = 'n', cex = 0.8, pt.cex = 1)
ar1.het <- lme(flow.het ~ lim * time * trt, random = ~ 1 | cID,
correlation = corAR1(form = ~ 1 | cID),
data = flow.counts)
#arma.het <- lme(flow.het ~ lim * time * trt, random = ~ 1 | cID,
#            correlation = corARMA(form = ~ 1 , p = 1,q = 2),
#            data = flow.counts)
#anova(ar1.het,arma.het)
summary(ar1.het)
anova.lme(ar1.het, type = "marginal", adjustSigma = F)
library(nlme)
anova.lme(ar1.het, type = "marginal", adjustSigma = F)
flow.counts
flow.counts2 = flow.counts[flow.counts$trt == "T",]
ar1.het <- lme(flow.het ~ lim * time, random = ~ 1 | cID,
correlation = corAR1(form = ~ 1 | cID),
data = flow.counts)
#arma.het <- lme(flow.het ~ lim * time * trt, random = ~ 1 | cID,
#            correlation = corARMA(form = ~ 1 , p = 1,q = 2),
#            data = flow.counts)
#anova(ar1.het,arma.het)
summary(ar1.het)
anova.lme(ar1.het, type = "marginal", adjustSigma = F)
flow.counts2 = flow.counts[flow.counts$trt == "T",]
ar1.het <- lme(flow.het ~ lim * time, random = ~ 1 | cID,
correlation = corAR1(form = ~ 1 | cID),
data = flow.counts2)
#arma.het <- lme(flow.het ~ lim * time * trt, random = ~ 1 | cID,
#            correlation = corARMA(form = ~ 1 , p = 1,q = 2),
#            data = flow.counts)
#anova(ar1.het,arma.het)
summary(ar1.het)
anova.lme(ar1.het, type = "marginal", adjustSigma = F)
ar1.het <- lme(flow.het ~ lim * time * trt, random = ~ 1 | cID,
correlation = corAR1(form = ~ 1 | cID),
data = flow.counts)
#arma.het <- lme(flow.het ~ lim * time * trt, random = ~ 1 | cID,
#            correlation = corARMA(form = ~ 1 , p = 1,q = 2),
#            data = flow.counts)
#anova(ar1.het,arma.het)
summary(ar1.het)
anova.lme(ar1.het, type = "marginal", adjustSigma = F)
setwd("C:/users/meglarse/github/larsen-dissertation/chpt2_cstat-comms/MGRAST")
setwd("C:/users/meglarse/github/larsen-dissertation/analyses/chpt2_cstat-comms/MGRAST")
meta <- read.csv("./data/metadata.csv", header = T)
meta = meta[,1:3]
nit <- read.delim("./data/nit-met.tsv", header = T, sep = "\t")
pho <- read.delim("./data/pho-met.tsv", header = T, sep = "\t")
sts <- read.delim("./data/stress-met.tsv", header = T, sep = "\t")
nit
head(nit)
nit2 = melt(nit, id = c("level.1","level.2","level.3","function.","metagenome"))
nit2 = nit2[nit2$variable == "abundance",]
# abundance matrix for level3 subsystems
level3 = acast(nit2, metagenome ~ level.3, mean)
level3[is.na(level3)] <- 0
# abundance matrix for subsystems protein function
func = acast(nit2, metagenome ~ function., mean)
func[is.na(func)] <- 0
lvl3.merge = merge(meta,level3,by.x = "meta.id", by.y = 0)
func.merge = merge(meta,func,by.x = "meta.id", by.y = 0)
dataREL <- level3
for(i in 1:ncol(level3)){
dataREL[,i] = level3[,i]/sum(level3[,i])
}
# Create Distance Matrix
sampleREL.dist <- vegdist(decostand(dataREL,method="log"),method="bray")
# Principal Coordinates Analysis
lvl3_pcoa <- cmdscale(sampleREL.dist,k=3,eig=TRUE,add=FALSE)
# Classical (Metric) Multidimensional Scaling; returns PCoA coordinates
# eig=TRUE returns eigenvalues; k = # of dimensions to calculate
# Percent Variance Explained Using PCoA (Axis 1,2,3)
explainvar1 <- round(lvl3_pcoa$eig[1]/sum(lvl3_pcoa$eig)*100,1)
explainvar2 <- round(lvl3_pcoa$eig[2]/sum(lvl3_pcoa$eig)*100,1)
explainvar3 <- round(lvl3_pcoa$eig[3]/sum(lvl3_pcoa$eig)*100,1)
pcoap <- merge(as.data.frame(lvl3_pcoa$points),meta,by.x=0,by.y ="meta.id", all.x=T)
rownames(pcoap) <- rownames(lvl3_pcoa$points)
par(mar=c(5,5,1,1))#, oma=c(3,1,1,1)+0.1 )
x.dim <- c(min(pcoap$V1)-(max(pcoap$V1)*0.1),max(pcoap$V1)+(max(pcoap$V1)*0.1))
y.dim <- c(min(pcoap$V2)-(max(pcoap$V2)*0.1),max(pcoap$V2)+(max(pcoap$V2)*0.1))
# Initiate Plot
nit.lvl3 = plot(pcoap$V1, pcoap$V2, xlab=paste("PCoA Axis 1 (",explainvar1, "%)", sep="")
, ylab=paste("PCoA Axis 2 (",explainvar2, "%)", sep=""),
xlim=x.dim, ylim=y.dim, pch=16, cex=2.0, type="n",xaxt="n",
yaxt="n", cex.lab=1.5, cex.axis=1.2)
axis(side=1, las=1)
axis(side=2, las=1)
abline(h=0, lty="dotted",col = "grey50")
abline(v=0, lty="dotted",col = "grey50")
box(lwd=2)
# Add Points & Ellipses
points(pcoap$V1[pcoap$lim == "N"], pcoap$V2[pcoap$lim == "N"], pch = 21, cex = 3.5,
bg = "black", col = "gray25")
points(pcoap$V1[pcoap$lim == "P"], pcoap$V2[pcoap$lim == "P"], pch = 21, cex = 3.5,
bg = "grey", col = "gray25")
legend("bottomleft",pch = c(20,20), col = c("black","grey"),c("N-limited","P-limited"), cex = 1.25, bty = 'n')
nitlvl3.adonis <- adonis(dataREL ~ meta$lim, method="bray", permutations=999)
nitlvl3.adonis
summary(nitlvl3.adonis)
dataREL <- func
for(i in 1:ncol(func)){
dataREL[,i] = func[,i]/sum(func[,i])
}
# Create Distance Matrix
sampleREL.dist <- vegdist(decostand(dataREL,method="log"),method="bray")
# Principal Coordinates Analysis
func_pcoa <- cmdscale(sampleREL.dist,k=3,eig=TRUE,add=FALSE)
# Classical (Metric) Multidimensional Scaling; returns PCoA coordinates
# eig=TRUE returns eigenvalues; k = # of dimensions to calculate
# Percent Variance Explained Using PCoA (Axis 1,2,3)
explainvar1 <- round(func_pcoa$eig[1]/sum(func_pcoa$eig)*100,1)
explainvar2 <- round(func_pcoa$eig[2]/sum(func_pcoa$eig)*100,1)
explainvar3 <- round(func_pcoa$eig[3]/sum(func_pcoa$eig)*100,1)
pcoap <- merge(as.data.frame(func_pcoa$points),meta,by.x=0,by.y ="meta.id", all.x=T)
rownames(pcoap) <- rownames(func_pcoa$points)
nitfunc.adonis <- adonis(dataREL ~ meta$lim, method="bray", permutations=999)
nitfunc.adonis
pho2 = melt(pho, id = c("level.1","level.2","level.3","function.","metagenome"))
pho2 = pho2[pho2$variable == "abundance",]
# abundance matrix for level3 subsystems
level3 = acast(pho2, metagenome ~ level.3, mean)
level3[is.na(level3)] <- 0
# abundance matrix for subsystems protein function
func = acast(pho2, metagenome ~ function., mean)
func[is.na(func)] <- 0
lvl3.merge = merge(meta,level3,by.x = "meta.id", by.y = 0)
func.merge = merge(meta,func,by.x = "meta.id", by.y = 0)
dataREL <- level3
for(i in 1:ncol(level3)){
dataREL[,i] = level3[,i]/sum(level3[,i])
}
# Create Distance Matrix
sampleREL.dist <- vegdist(decostand(dataREL,method="log"),method="bray")
# Principal Coordinates Analysis
lvl3_pcoa <- cmdscale(sampleREL.dist,k=3,eig=TRUE,add=FALSE)
# Classical (Metric) Multidimensional Scaling; returns PCoA coordinates
# eig=TRUE returns eigenvalues; k = # of dimensions to calculate
explainvar1 <- round(lvl3_pcoa$eig[1]/sum(lvl3_pcoa$eig)*100,1)
explainvar2 <- round(lvl3_pcoa$eig[2]/sum(lvl3_pcoa$eig)*100,1)
explainvar3 <- round(lvl3_pcoa$eig[3]/sum(lvl3_pcoa$eig)*100,1)
pcoap <- merge(as.data.frame(lvl3_pcoa$points),meta,by.x=0,by.y ="meta.id", all.x=T)
rownames(pcoap) <- rownames(lvl3_pcoa$points)
pholvl3.adonis <- adonis(dataREL ~ meta$lim, method="bray", permutations=999)
pholvl3.adonis
pcoap
dataREL <- func
for(i in 1:ncol(func)){
dataREL[,i] = func[,i]/sum(func[,i])
}
# Create Distance Matrix
sampleREL.dist <- vegdist(decostand(dataREL,method="log"),method="bray")
# Principal Coordinates Analysis
func_pcoa <- cmdscale(sampleREL.dist,k=3,eig=TRUE,add=FALSE)
# Classical (Metric) Multidimensional Scaling; returns PCoA coordinates
# eig=TRUE returns eigenvalues; k = # of dimensions to calculate
# Percent Variance Explained Using PCoA (Axis 1,2,3)
explainvar1 <- round(func_pcoa$eig[1]/sum(func_pcoa$eig)*100,1)
explainvar2 <- round(func_pcoa$eig[2]/sum(func_pcoa$eig)*100,1)
explainvar3 <- round(func_pcoa$eig[3]/sum(func_pcoa$eig)*100,1)
pcoap <- merge(as.data.frame(func_pcoa$points),meta,by.x=0,by.y ="meta.id", all.x=T)
rownames(pcoap) <- rownames(func_pcoa$points)
phofunc.adonis <- adonis(dataREL ~ meta$lim, method="bray", permutations=999)
phofunc.adonis
sts2 = melt(sts, id = c("level.1","level.2","level.3","function.","metagenome"))
sts2 = sts2[sts2$variable == "abundance",]
# abundance matrix for level3 subsystems
level3 = acast(sts2, metagenome ~ level.3, mean)
level3[is.na(level3)] <- 0
# abundance matrix for subsystems protein function
func = acast(sts2, metagenome ~ function., mean)
func[is.na(func)] <- 0
dataREL <- level3
for(i in 1:ncol(level3)){
dataREL[,i] = level3[,i]/sum(level3[,i])
}
# Create Distance Matrix
sampleREL.dist <- vegdist(decostand(dataREL,method="log"),method="bray")
# Principal Coordinates Analysis
lvl3_pcoa <- cmdscale(sampleREL.dist,k=3,eig=TRUE,add=FALSE)
# Classical (Metric) Multidimensional Scaling; returns PCoA coordinates
# eig=TRUE returns eigenvalues; k = # of dimensions to calculate
# Percent Variance Explained Using PCoA (Axis 1,2,3)
explainvar1 <- round(lvl3_pcoa$eig[1]/sum(lvl3_pcoa$eig)*100,1)
explainvar2 <- round(lvl3_pcoa$eig[2]/sum(lvl3_pcoa$eig)*100,1)
explainvar3 <- round(lvl3_pcoa$eig[3]/sum(lvl3_pcoa$eig)*100,1)
pcoap <- merge(as.data.frame(lvl3_pcoa$points),meta,by.x=0,by.y ="meta.id", all.x=T)
rownames(pcoap) <- rownames(lvl3_pcoa$points)
stslvl3.adonis <- adonis(dataREL ~ meta$lim, method="bray", permutations=999)
stslvl3.adonis
dataREL <- func
for(i in 1:ncol(func)){
dataREL[,i] = func[,i]/sum(func[,i])
}
# Create Distance Matrix
sampleREL.dist <- vegdist(decostand(dataREL,method="log"),method="bray")
# Principal Coordinates Analysis
func_pcoa <- cmdscale(sampleREL.dist,k=3,eig=TRUE,add=FALSE)
# Classical (Metric) Multidimensional Scaling; returns PCoA coordinates
# eig=TRUE returns eigenvalues; k = # of dimensions to calculate
# Percent Variance Explained Using PCoA (Axis 1,2,3)
explainvar1 <- round(func_pcoa$eig[1]/sum(func_pcoa$eig)*100,1)
explainvar2 <- round(func_pcoa$eig[2]/sum(func_pcoa$eig)*100,1)
explainvar3 <- round(func_pcoa$eig[3]/sum(func_pcoa$eig)*100,1)
pcoap <- merge(as.data.frame(func_pcoa$points),meta,by.x=0,by.y ="meta.id", all.x=T)
rownames(pcoap) <- rownames(func_pcoa$points)
stsfunc.adonis <- adonis(dataREL ~ meta$lim, method="bray", permutations=999)
stsfunc.adonis
dataREL <- level3
for(i in 1:ncol(level3)){
dataREL[,i] = level3[,i]/sum(level3[,i])
}
# Create Distance Matrix
sampleREL.dist <- vegdist(decostand(dataREL,method="log"),method="bray")
# Principal Coordinates Analysis
lvl3_pcoa <- cmdscale(sampleREL.dist,k=3,eig=TRUE,add=FALSE)
# Classical (Metric) Multidimensional Scaling; returns PCoA coordinates
# eig=TRUE returns eigenvalues; k = # of dimensions to calculate
# Percent Variance Explained Using PCoA (Axis 1,2,3)
explainvar1 <- round(lvl3_pcoa$eig[1]/sum(lvl3_pcoa$eig)*100,1)
explainvar2 <- round(lvl3_pcoa$eig[2]/sum(lvl3_pcoa$eig)*100,1)
explainvar3 <- round(lvl3_pcoa$eig[3]/sum(lvl3_pcoa$eig)*100,1)
pcoap <- merge(as.data.frame(lvl3_pcoa$points),meta,by.x=0,by.y ="meta.id", all.x=T)
rownames(pcoap) <- rownames(lvl3_pcoa$points)
stslvl3.adonis <- adonis(dataREL ~ meta$lim, method="bray", permutations=999)
stslvl3.adonis
pho2
head(nit2)
head(meta)
head(nit)
head(nit2)
head(lvl3.merge)
melt(lvl3.merge)
aggregate(melt(lvl3.merge),variable ~ lim)
aggregate(melt(lvl3.merge),variable ~ lim, mean)
aggregate(melt(lvl3.merge),lim ~ variable, mean)
lvl3.dat <- melt(lvl3.merge)
head(lvl3.dat)
head(lvl3.merge)
str(lvl3.merge)
unique(nit$level.3)
nit2 = melt(nit, id = c("level.1","level.2","level.3","function.","metagenome"))
nit2 = nit2[nit2$variable == "abundance",]
# abundance matrix for level3 subsystems
level3 = acast(nit2, metagenome ~ level.3, mean)
level3[is.na(level3)] <- 0
# abundance matrix for subsystems protein function
func = acast(nit2, metagenome ~ function., mean)
func[is.na(func)] <- 0
lvl3.merge = merge(meta,level3,by.x = "meta.id", by.y = 0)
func.merge = merge(meta,func,by.x = "meta.id", by.y = 0)
lvl3.merge
func.merge
pho2 = melt(pho, id = c("level.1","level.2","level.3","function.","metagenome"))
pho2 = pho2[pho2$variable == "abundance",]
# abundance matrix for level3 subsystems
level3 = acast(pho2, metagenome ~ level.3, mean)
level3[is.na(level3)] <- 0
# abundance matrix for subsystems protein function
func = acast(pho2, metagenome ~ function., mean)
func[is.na(func)] <- 0
lvl3.merge = merge(meta,level3,by.x = "meta.id", by.y = 0)
func.merge = merge(meta,func,by.x = "meta.id", by.y = 0)
lvl3.merge
sts2 = melt(sts, id = c("level.1","level.2","level.3","function.","metagenome"))
sts2 = sts2[sts2$variable == "abundance",]
# abundance matrix for level3 subsystems
level3 = acast(sts2, metagenome ~ level.3, mean)
level3[is.na(level3)] <- 0
# abundance matrix for subsystems protein function
func = acast(sts2, metagenome ~ function., mean)
func[is.na(func)] <- 0
lvl3.merge = merge(meta,level3,by.x = "meta.id", by.y = 0)
func.merge = merge(meta,func,by.x = "meta.id", by.y = 0)
dataREL <- level3
for(i in 1:ncol(level3)){
dataREL[,i] = level3[,i]/sum(level3[,i])
}
# Create Distance Matrix
sampleREL.dist <- vegdist(decostand(dataREL,method="log"),method="bray")
# Principal Coordinates Analysis
lvl3_pcoa <- cmdscale(sampleREL.dist,k=3,eig=TRUE,add=FALSE)
# Classical (Metric) Multidimensional Scaling; returns PCoA coordinates
# eig=TRUE returns eigenvalues; k = # of dimensions to calculate
# Percent Variance Explained Using PCoA (Axis 1,2,3)
explainvar1 <- round(lvl3_pcoa$eig[1]/sum(lvl3_pcoa$eig)*100,1)
explainvar2 <- round(lvl3_pcoa$eig[2]/sum(lvl3_pcoa$eig)*100,1)
explainvar3 <- round(lvl3_pcoa$eig[3]/sum(lvl3_pcoa$eig)*100,1)
pcoap <- merge(as.data.frame(lvl3_pcoa$points),meta,by.x=0,by.y ="meta.id", all.x=T)
rownames(pcoap) <- rownames(lvl3_pcoa$points)
x.dim <- c(min(pcoap$V1)-(max(pcoap$V1)*0.1),max(pcoap$V1)+(max(pcoap$V1)*0.1))
y.dim <- c(min(pcoap$V2)-(max(pcoap$V2)*0.1),max(pcoap$V2)+(max(pcoap$V2)*0.1))
# Initiate Plot
sts.lvl3 = plot(pcoap$V1, pcoap$V2, xlab=paste("PCoA Axis 1 (",explainvar1, "%)", sep="")
, ylab=paste("PCoA Axis 2 (",explainvar2, "%)", sep=""),
xlim=x.dim, ylim=y.dim, pch=16, cex=2.0, type="n",xaxt="n",
yaxt="n", cex.lab=1.5, cex.axis=1.2)
axis(side=1, las=1)
axis(side=2, las=1)
abline(h=0, lty="dotted",col = "grey50")
abline(v=0, lty="dotted",col = "grey50")
box(lwd=2)
# Add Points & Ellipses
points(pcoap$V1[pcoap$lim == "N"], pcoap$V2[pcoap$lim == "N"], pch = 21, cex = 3.5,
bg = "black", col = "gray25")
points(pcoap$V1[pcoap$lim == "P"], pcoap$V2[pcoap$lim == "P"], pch = 21, cex = 3.5,
bg = "grey", col = "gray25")
legend("bottomleft",pch = c(20,20), col = c("black","grey"),c("N-limited","P-limited"), cex = 1.25, bty = 'n')
stslvl3.adonis <- adonis(dataREL ~ meta$lim, method="bray", permutations=999)
stslvl3.adonis
lvl3.merge
nit2 = melt(nit, id = c("level.1","level.2","level.3","function.","metagenome"))
nit2 = nit2[nit2$variable == "abundance",]
# abundance matrix for level3 subsystems
level3 = acast(nit2, metagenome ~ level.3, mean)
level3[is.na(level3)] <- 0
# abundance matrix for subsystems protein function
func = acast(nit2, metagenome ~ function., mean)
func[is.na(func)] <- 0
lvl3.merge = merge(meta,level3,by.x = "meta.id", by.y = 0)
func.merge = merge(meta,func,by.x = "meta.id", by.y = 0)
dataREL <- level3
for(i in 1:ncol(level3)){
dataREL[,i] = level3[,i]/sum(level3[,i])
}
dataREL
